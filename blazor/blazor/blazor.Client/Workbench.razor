@page "/"
@rendermode InteractiveWebAssembly
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using System.Text.RegularExpressions
@using blazor.Client.model
<PageTitle>Окно просмотра</PageTitle>
<Card>
    <CardHeader>
        <Heading Size.Is4>Окно просмотра</Heading>
    </CardHeader>
    <CardBody>
        <Field>
            <FileEdit Changed="OnChanged" />
        </Field>
        <Bar>
            <BarBrand>
                <Button Color="Color.Primary">Снять снова</Button>
                <Button Color="Color.Secondary">Отметить отсутствующий</Button>
            </BarBrand>
        </Bar>
        <Divider />
        <Field>
            <div class="image-preview" style="background-color: grey; width: 60%; height: 300px"> </div>
        </Field>
    </CardBody>
    <CardFooter>
        <Button Color="Color.Primary">Продолжить</Button>
    </CardFooter>
</Card>

@code {

    string fileContent;
    async Task OnChanged(FileChangedEventArgs e)
    {
        foreach (var file in e.Files)
        {
            // A stream is going to be the destination stream we're writing to.
            using (var stream = new MemoryStream())
            {

                // Here we're telling the FileEdit where to write the upload result
                await file.WriteToStreamAsync(stream);

                // Once we reach this line it means the file is fully uploaded.
                // In this case we're going to offset to the beginning of file
                // so we can read it.
                stream.Seek(0, SeekOrigin.Begin);

                // Use the stream reader to read the content of uploaded file,
                // in this case we can assume it is a textual file.
                using (var reader = new StreamReader(stream))
                {

                    var content = new MultipartFormDataContent();
                    content.Add(new StreamContent(stream, Convert.ToInt32(stream.Length)), "image", file.Name);

                    var result = await httpClient.PostAsync("http://185.185.71.248:13845/track", content);
                    string jsonResult = await result.Content.ReadAsStringAsync();

                    // remove "" and \ symbols
                    jsonResult = jsonResult.Substring(1, jsonResult.Length - 2);
                    jsonResult = Regex.Unescape(jsonResult);

                    // parse json
                    List<Track>? trackResult = JsonConvert.DeserializeObject<List<Track>>(jsonResult);
                    if (trackResult == null)
                    {
                        Console.WriteLine("Json Parse Error"); 
                        return;
                    }
                    await jsRuntime.InvokeVoidAsync("console.log", trackResult);

                    // here you have your json
                }
            }
        }
    }
}